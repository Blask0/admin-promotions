type Query {
  getPaymentMethods: [PaymentMethod!]
  getCampaigns: ConditionList!
  getBenefits: [Benefit]
}

type Mutation {
  translate(conditions: String!): String
}

type ConditionList {
  conditionsLimit: Int!
  conditions: [Condition!]
  error: String
}

type Condition {
  conditionId: ID!
  expression: String!
  visualRepresentation: String
  description: String
  isEnabled: Boolean!
  isFeatured: Boolean!
  dateRange: DateRange
}

type DateRange {
  from: String
  to: String
}

type Benefit {
  name: String!
  isActive: Boolean!
  campaigns: [Campaign]!
  effectType: String
}

type Campaign {
  name: String!
}

type PaymentMethod {
  id: ID!
  name: String!
}
